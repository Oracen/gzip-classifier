from gzip import compress

from .classifier import ParallelClassifier
from .quick import QuickClassifier
from .utils import (
    prepare_input,
    calc_distance,
    calc_distance_w_args,
    generate_stdev_index,
    add_stdev_overscan,
    get_likely_bin,
)


class SmartClassifier(QuickClassifier):
    """ A classifier similar to the QuickClassifier that automatically
    calculates its bin size values and overscan values based on the computed
    standard deviation of the training set compressed length distribution.

    This classifier will always identify a bin closest to the sample value
    being classified and search at least one standard deviation to the left
    and right of that value.

    If multiple bins generated by this class would share the same end value,
    then those bins are combined such that a single scan left and right of a
    given bin may search more than one standard deviation but never less.
    """

    def __init__(self, *args, should_overscan=True, **kwargs):
        self.overscan = should_overscan
        super().__init__(*args, **kwargs)

    # TODO: Add import/export or recalc for importing models.

    def get_indicies(self, Cx1, overscan):
        return add_stdev_overscan(
            *get_likely_bin(self._index, Cx1),
            bound=len(self._model),
            overscan=overscan,
            stdev=self.stdev,
        )

    def train(self, training_data, labels):
        super().train(training_data, labels)
        self._index, self.stdev = generate_stdev_index(self._model)


class SmartParallelClassifier(SmartClassifier, ParallelClassifier):
    """ This classifier implements the same smart search algorithm based on the
    training distribution as the SmartClassifier, but also provides the ability
    to spread the computation along multiple cores for both training and testing.
    """
    pass
